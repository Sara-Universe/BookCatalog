// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestApiProject.Data;

#nullable disable

namespace RestApiProject.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250924110428_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<int>("FavoriteBooksId")
                        .HasColumnType("int");

                    b.Property<int>("FavoritedByUsersId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteBooksId", "FavoritedByUsersId");

                    b.HasIndex("FavoritedByUsersId");

                    b.ToTable("UserFavoriteBooks", (string)null);
                });

            modelBuilder.Entity("BookUser1", b =>
                {
                    b.Property<int>("WishlistBooksId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistedByUsersId")
                        .HasColumnType("int");

                    b.HasKey("WishlistBooksId", "WishlistedByUsersId");

                    b.HasIndex("WishlistedByUsersId");

                    b.ToTable("UserWishlistBooks", (string)null);
                });

            modelBuilder.Entity("RestApiProject.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BorrowedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBorrowed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublishedYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowedByUserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("RestApiProject.Models.BorrowRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOverdue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowRecords");
                });

            modelBuilder.Entity("RestApiProject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("RestApiProject.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("FavoriteBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestApiProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FavoritedByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUser1", b =>
                {
                    b.HasOne("RestApiProject.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("WishlistBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestApiProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("WishlistedByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestApiProject.Models.Book", b =>
                {
                    b.HasOne("RestApiProject.Models.User", "BorrowedByUser")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("BorrowedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BorrowedByUser");
                });

            modelBuilder.Entity("RestApiProject.Models.BorrowRecord", b =>
                {
                    b.HasOne("RestApiProject.Models.Book", "Book")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestApiProject.Models.User", "User")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestApiProject.Models.Book", b =>
                {
                    b.Navigation("BorrowRecords");
                });

            modelBuilder.Entity("RestApiProject.Models.User", b =>
                {
                    b.Navigation("BorrowRecords");

                    b.Navigation("BorrowedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
